{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/components/chat.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Chat = registerClientReference(\n    function() { throw new Error(\"Attempted to call Chat() from the server but Chat is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/chat.tsx <module evaluation>\",\n    \"Chat\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qDACA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/components/chat.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Chat = registerClientReference(\n    function() { throw new Error(\"Attempted to call Chat() from the server but Chat is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/chat.tsx\",\n    \"Chat\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,iCACA"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/lib/ai/models.ts"],"sourcesContent":["// Define your models here.\n\nexport interface Model {\n  id: string;\n  label: string;\n  apiIdentifier: string;\n  description: string;\n}\n\nexport const models: Array<Model> = [\n  {\n    id: 'gpt-4o-mini',\n    label: 'Star Trader',\n    apiIdentifier: 'gpt-4o-mini',\n    description: 'Star Trader - For all your Star Citizen Trading Needs.',\n  },\n] as const;\n\nexport const DEFAULT_MODEL_NAME: string = 'gpt-4o-mini';\n"],"names":[],"mappings":"AAAA,2BAA2B;;;;;AASpB,MAAM,SAAuB;IAClC;QACE,IAAI;QACJ,OAAO;QACP,eAAe;QACf,aAAa;IACf;CACD;AAEM,MAAM,qBAA6B"}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/lib/utils.ts"],"sourcesContent":["import type {\n  CoreAssistantMessage,\n  CoreMessage,\n  CoreToolMessage,\n  Message,\n  ToolInvocation,\n} from 'ai';\nimport { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nimport type { Message as DBMessage, Document } from '@/lib/db/schema';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\ninterface ApplicationError extends Error {\n  info: string;\n  status: number;\n}\n\nexport const fetcher = async (url: string) => {\n  const res = await fetch(url);\n\n  if (!res.ok) {\n    const error = new Error(\n      'An error occurred while fetching the data.',\n    ) as ApplicationError;\n\n    error.info = await res.json();\n    error.status = res.status;\n\n    throw error;\n  }\n\n  return res.json();\n};\n\nexport function getLocalStorage(key: string) {\n  if (typeof window !== 'undefined') {\n    return JSON.parse(localStorage.getItem(key) || '[]');\n  }\n  return [];\n}\n\nexport function generateUUID(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n\n\n\nexport function convertToUIMessages(\n  messages: Array<DBMessage>,\n): Array<Message> {\n  return messages.reduce((chatMessages: Array<Message>, message) => {\n    if (message.role === 'tool') {\n      return chatMessages; // Exclude tool messages from UI messages\n    }\n\n    let textContent = '';\n    const toolInvocations: Array<ToolInvocation> = [];\n\n    if (typeof message.content === 'string') {\n      textContent = message.content;\n    } else if (Array.isArray(message.content)) {\n      for (const content of message.content) {\n        if (content.type === 'text') {\n          textContent += content.text;\n        } else if (content.type === 'tool-call') {\n          toolInvocations.push({\n            state: 'call',\n            toolCallId: content.toolCallId,\n            toolName: content.toolName,\n            args: content.args,\n          });\n        }\n      }\n    }\n\n    chatMessages.push({\n      id: message.id,\n      role: message.role as Message['role'],\n      content: textContent,\n      toolInvocations,\n    });\n\n    return chatMessages;\n  }, []);\n}\n\nexport function sanitizeResponseMessages(\n  messages: Array<CoreToolMessage | CoreAssistantMessage>,\n): Array<CoreToolMessage | CoreAssistantMessage> {\n  const toolResultIds: Array<string> = [];\n\n  for (const message of messages) {\n    console.log('Sanitizing messages:', messages);\n    if (message.role === 'tool') {\n      for (const content of message.content) {\n       if (content.type === 'tool-result') {\n          toolResultIds.push(content.toolCallId);\n        }\n     }\n    }\n  }\n\n  const messagesBySanitizedContent = messages.map((message) => {\n    if (message.role !== 'assistant') return message;\n\n    if (typeof message.content === 'string') return message;\n\n    const sanitizedContent = message.content.filter((content) =>\n      content.type === 'tool-call'\n        ? toolResultIds.includes(content.toolCallId)\n        : content.type === 'text'\n          ? content.text.length > 0\n          : true,\n    );\n\n    return {\n      ...message,\n      content: sanitizedContent,\n    };\n  });\n  return messagesBySanitizedContent; \n  //return messagesBySanitizedContent.filter(\n  //  (message) => message.content.length > 0,\n  //);\n}\n\n\n\nexport function sanitizeUIMessages(messages: Array<Message>): Array<Message> {\n  const messagesBySanitizedToolInvocations = messages.map((message) => {\n    if (message.role !== 'assistant') return message;\n\n    if (!message.toolInvocations) return message;\n\n    const toolResultIds: Array<string> = [];\n\n    for (const toolInvocation of message.toolInvocations) {\n      if (toolInvocation.state === 'result') {\n        toolResultIds.push(toolInvocation.toolCallId);\n      }\n    }\n\n    const sanitizedToolInvocations = message.toolInvocations.filter(\n      (toolInvocation) =>\n        toolInvocation.state === 'result' ||\n        toolResultIds.includes(toolInvocation.toolCallId),\n    );\n\n    return {\n      ...message,\n      toolInvocations: sanitizedToolInvocations,\n    };\n  });\n\n  return messagesBySanitizedToolInvocations.filter(\n    (message) =>\n      message.content.length > 0 ||\n      (message.toolInvocations && message.toolInvocations.length > 0),\n  );\n}\n\nexport function getMostRecentUserMessage(messages: Array<CoreMessage>) {\n  const userMessages = messages.filter((message) => message.role === 'user');\n  return userMessages.at(-1);\n}\n\nexport function getDocumentTimestampByIndex(\n  documents: Array<Document>,\n  index: number,\n) {\n  if (!documents) return new Date();\n  if (index > documents.length) return new Date();\n\n  return documents[index].createdAt;\n}\n\nexport function getMessageIdFromAnnotations(message: Message) {\n  if (!message.annotations) return message.id;\n\n  const [annotation] = message.annotations;\n  if (!annotation) return message.id;\n\n  // @ts-expect-error messageIdFromServer is not defined in MessageAnnotation\n  return annotation.messageIdFromServer;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 205, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/components/data-stream-handler.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const DataStreamHandler = registerClientReference(\n    function() { throw new Error(\"Attempted to call DataStreamHandler() from the server but DataStreamHandler is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/data-stream-handler.tsx <module evaluation>\",\n    \"DataStreamHandler\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,oBAAoB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACnD;IAAa,MAAM,IAAI,MAAM;AAAkP,GAC/Q,oEACA"}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/components/data-stream-handler.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const DataStreamHandler = registerClientReference(\n    function() { throw new Error(\"Attempted to call DataStreamHandler() from the server but DataStreamHandler is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/data-stream-handler.tsx\",\n    \"DataStreamHandler\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,oBAAoB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACnD;IAAa,MAAM,IAAI,MAAM;AAAkP,GAC/Q,gDACA"}},
    {"offset": {"line": 227, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 237, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 243, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/app/%28chat%29/chat/%5Bid%5D/page.tsx"],"sourcesContent":["import { cookies } from 'next/headers';\nimport { notFound } from 'next/navigation';\n\nimport { auth } from '@/app/(auth)/auth';\nimport { Chat } from '@/components/chat';\nimport { DEFAULT_MODEL_NAME, models } from '@/lib/ai/models';\nimport { getChatById, getMessagesByChatId } from '@/lib/db/queries';\nimport { convertToUIMessages } from '@/lib/utils';\nimport { DataStreamHandler } from '@/components/data-stream-handler';\n\nexport default async function Page(props: { params: Promise<{ id: string }> }) {\n  const params = await props.params;\n  const { id } = params;\n  const chat = await getChatById({ id });\n\n  if (!chat) {\n    notFound();\n  }\n\n  const session = await auth();\n\n  if (chat.visibility === 'private') {\n    if (!session || !session.user) {\n      return notFound();\n    }\n\n    if (session.user.id !== chat.userId) {\n      return notFound();\n    }\n  }\n\n  const messagesFromDb = await getMessagesByChatId({\n    id,\n  });\n\n  const cookieStore = await cookies();\n  const modelIdFromCookie = cookieStore.get('model-id')?.value;\n  const selectedModelId =\n    models.find((model) => model.id === modelIdFromCookie)?.id ||\n    DEFAULT_MODEL_NAME;\n\n  return (\n    <>\n      <Chat\n        id={chat.id}\n        initialMessages={convertToUIMessages(messagesFromDb)}\n        selectedModelId={selectedModelId}\n        selectedVisibilityType={chat.visibility}\n        isReadonly={session?.user?.id !== chat.userId}\n      />\n      <DataStreamHandler id={id} />\n    </>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAPA;;;;;;;;;;AASe,eAAe,KAAK,KAA0C;IAC3E,MAAM,SAAS,MAAM,MAAM,MAAM;IACjC,MAAM,EAAE,EAAE,EAAE,GAAG;IACf,MAAM,OAAO,MAAM,CAAA,GAAA,oHAAA,CAAA,cAAW,AAAD,EAAE;QAAE;IAAG;IAEpC,IAAI,CAAC,MAAM;QACT,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IACT;IAEA,MAAM,UAAU,MAAM,CAAA,GAAA,uHAAA,CAAA,OAAI,AAAD;IAEzB,IAAI,KAAK,UAAU,KAAK,WAAW;QACjC,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,EAAE;YAC7B,OAAO,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;QAChB;QAEA,IAAI,QAAQ,IAAI,CAAC,EAAE,KAAK,KAAK,MAAM,EAAE;YACnC,OAAO,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;QAChB;IACF;IAEA,MAAM,iBAAiB,MAAM,CAAA,GAAA,oHAAA,CAAA,sBAAmB,AAAD,EAAE;QAC/C;IACF;IAEA,MAAM,cAAc,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAChC,MAAM,oBAAoB,YAAY,GAAG,CAAC,aAAa;IACvD,MAAM,kBACJ,mHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,CAAC,QAAU,MAAM,EAAE,KAAK,oBAAoB,MACxD,mHAAA,CAAA,qBAAkB;IAEpB,qBACE;;0BACE,8OAAC,mHAAA,CAAA,OAAI;gBACH,IAAI,KAAK,EAAE;gBACX,iBAAiB,CAAA,GAAA,4GAAA,CAAA,sBAAmB,AAAD,EAAE;gBACrC,iBAAiB;gBACjB,wBAAwB,KAAK,UAAU;gBACvC,YAAY,SAAS,MAAM,OAAO,KAAK,MAAM;;;;;;0BAE/C,8OAAC,wIAAA,CAAA,oBAAiB;gBAAC,IAAI;;;;;;;;AAG7B"}},
    {"offset": {"line": 312, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 324, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/lib/ai/custom-middleware.ts"],"sourcesContent":["import type { Experimental_LanguageModelV1Middleware } from 'ai';\n\nexport const customMiddleware: Experimental_LanguageModelV1Middleware = {};\n"],"names":[],"mappings":";;;AAEO,MAAM,mBAA2D,CAAC"}},
    {"offset": {"line": 328, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/lib/ai/index.ts"],"sourcesContent":["import { openai } from '@ai-sdk/openai';\nimport { experimental_wrapLanguageModel as wrapLanguageModel } from 'ai';\n\nimport { customMiddleware } from './custom-middleware';\n\nexport const customModel = (apiIdentifier: string) => {\n  return wrapLanguageModel({\n    model: openai(apiIdentifier),\n    middleware: customMiddleware,\n  });\n};\n"],"names":[],"mappings":";;;AAGA;AAFA;AADA;;;;AAKO,MAAM,cAAc,CAAC;IAC1B,OAAO,CAAA,GAAA,oJAAA,CAAA,iCAAiB,AAAD,EAAE;QACvB,OAAO,CAAA,GAAA,uJAAA,CAAA,SAAM,AAAD,EAAE;QACd,YAAY,iIAAA,CAAA,mBAAgB;IAC9B;AACF"}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/app/%28chat%29/actions.ts"],"sourcesContent":["'use server';\n\nimport { type CoreUserMessage, generateText } from 'ai';\nimport { cookies } from 'next/headers';\n\nimport { customModel } from '@/lib/ai';\nimport {\n  deleteMessagesByChatIdAfterTimestamp,\n  getMessageById,\n  updateChatVisiblityById,\n} from '@/lib/db/queries';\nimport { VisibilityType } from '@/components/visibility-selector';\n\nexport async function saveModelId(model: string) {\n  const cookieStore = await cookies();\n  cookieStore.set('model-id', model);\n}\n\nexport async function generateTitleFromUserMessage({\n  message,\n}: {\n  message: CoreUserMessage;\n}) {\n  const { text: title } = await generateText({\n    model: customModel('gpt-4o-mini'),\n    system: `\\n\n    - you will generate a short title based on the first message a user begins a conversation with\n    - ensure it is not more than 80 characters long\n    - the title should be a summary of the user's message\n    - do not use quotes or colons`,\n    prompt: JSON.stringify(message),\n  });\n\n  return title;\n}\n\nexport async function deleteTrailingMessages({ id }: { id: string }) {\n  const [message] = await getMessageById({ id });\n\n  await deleteMessagesByChatIdAfterTimestamp({\n    chatId: message.chatId,\n    timestamp: message.createdAt,\n  });\n}\n\nexport async function updateChatVisibility({\n  chatId,\n  visibility,\n}: {\n  chatId: string;\n  visibility: VisibilityType;\n}) {\n  await updateChatVisiblityById({ chatId, visibility });\n}\n"],"names":[],"mappings":";;;;;;;;AAGA;AAEA;AACA;;AAJA;;;;;;;AAWO,eAAe,uCAAS,GAAT,YAAY,KAAa;IAC7C,MAAM,cAAc,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAChC,YAAY,GAAG,CAAC,YAAY;AAC9B;AAEO,eAAe,uCAA0B,GAA1B,6BAA6B,EACjD,OAAO,EAGR;IACC,MAAM,EAAE,MAAM,KAAK,EAAE,GAAG,MAAM,CAAA,GAAA,oJAAA,CAAA,eAAY,AAAD,EAAE;QACzC,OAAO,CAAA,GAAA,kHAAA,CAAA,cAAW,AAAD,EAAE;QACnB,QAAQ,CAAC;;;;iCAIoB,CAAC;QAC9B,QAAQ,KAAK,SAAS,CAAC;IACzB;IAEA,OAAO;AACT;AAEO,eAAe,uCAAoB,GAApB,uBAAuB,EAAE,EAAE,EAAkB;IACjE,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAA,GAAA,oHAAA,CAAA,iBAAc,AAAD,EAAE;QAAE;IAAG;IAE5C,MAAM,CAAA,GAAA,oHAAA,CAAA,uCAAoC,AAAD,EAAE;QACzC,QAAQ,QAAQ,MAAM;QACtB,WAAW,QAAQ,SAAS;IAC9B;AACF;AAEO,eAAe,uCAAkB,GAAlB,qBAAqB,EACzC,MAAM,EACN,UAAU,EAIX;IACC,MAAM,CAAA,GAAA,oHAAA,CAAA,0BAAuB,AAAD,EAAE;QAAE;QAAQ;IAAW;AACrD;;;IAxCsB;IAKA;IAkBA;IASA;;AAhCA,+OAAA;AAKA,+OAAA;AAkBA,+OAAA;AASA,+OAAA"}},
    {"offset": {"line": 416, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 422, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 427, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}