{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/lib/db/schema.ts"],"sourcesContent":["import type { InferSelectModel } from 'drizzle-orm';\nimport {\n  pgTable,\n  varchar,\n  timestamp,\n  json,\n  uuid,\n  text,\n  primaryKey,\n  foreignKey,\n  boolean,\n} from 'drizzle-orm/pg-core';\n\nexport const user = pgTable('User', {\n  id: uuid('id').primaryKey().notNull().defaultRandom(),\n  email: varchar('email', { length: 64 }).notNull(),\n  password: varchar('password', { length: 64 }),\n});\n\nexport type User = InferSelectModel<typeof user>;\n\nexport const chat = pgTable('Chat', {\n  id: uuid('id').primaryKey().notNull().defaultRandom(),\n  createdAt: timestamp('createdAt').notNull(),\n  title: text('title').notNull(),\n  userId: uuid('userId')\n    .notNull()\n    .references(() => user.id),\n  visibility: varchar('visibility', { enum: ['public', 'private'] })\n    .notNull()\n    .default('private'),\n});\n\nexport type Chat = InferSelectModel<typeof chat>;\n\nexport const message = pgTable('Message', {\n  id: uuid('id').primaryKey().notNull().defaultRandom(),\n  chatId: uuid('chatId')\n    .notNull()\n    .references(() => chat.id),\n  role: varchar('role').notNull(),\n  content: json('content').notNull(),\n  createdAt: timestamp('createdAt').notNull(),\n});\n\nexport type Message = InferSelectModel<typeof message>;\n\nexport const vote = pgTable(\n  'Vote',\n  {\n    chatId: uuid('chatId')\n      .notNull()\n      .references(() => chat.id),\n    messageId: uuid('messageId')\n      .notNull()\n      .references(() => message.id),\n    isUpvoted: boolean('isUpvoted').notNull(),\n  },\n  (table) => {\n    return {\n      pk: primaryKey({ columns: [table.chatId, table.messageId] }),\n    };\n  },\n);\n\nexport type Vote = InferSelectModel<typeof vote>;\n\nexport const document = pgTable(\n  'Document',\n  {\n    id: uuid('id').notNull().defaultRandom(),\n    createdAt: timestamp('createdAt').notNull(),\n    title: text('title').notNull(),\n    content: text('content'),\n    kind: varchar('text', { enum: ['text', 'code'] })\n      .notNull()\n      .default('text'),\n    userId: uuid('userId')\n      .notNull()\n      .references(() => user.id),\n  },\n  (table) => {\n    return {\n      pk: primaryKey({ columns: [table.id, table.createdAt] }),\n    };\n  },\n);\n\nexport type Document = InferSelectModel<typeof document>;\n\nexport const suggestion = pgTable(\n  'Suggestion',\n  {\n    id: uuid('id').notNull().defaultRandom(),\n    documentId: uuid('documentId').notNull(),\n    documentCreatedAt: timestamp('documentCreatedAt').notNull(),\n    originalText: text('originalText').notNull(),\n    suggestedText: text('suggestedText').notNull(),\n    description: text('description'),\n    isResolved: boolean('isResolved').notNull().default(false),\n    userId: uuid('userId')\n      .notNull()\n      .references(() => user.id),\n    createdAt: timestamp('createdAt').notNull(),\n  },\n  (table) => ({\n    pk: primaryKey({ columns: [table.id] }),\n    documentRef: foreignKey({\n      columns: [table.documentId, table.documentCreatedAt],\n      foreignColumns: [document.id, document.createdAt],\n    }),\n  }),\n);\n\nexport type Suggestion = InferSelectModel<typeof suggestion>;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 262, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/lib/db/queries.ts"],"sourcesContent":["import 'server-only';\n\nimport { genSaltSync, hashSync } from 'bcrypt-ts';\nimport { and, asc, desc, eq, gt, gte } from 'drizzle-orm';\nimport { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\n\nimport {\n  user,\n  chat,\n  type User,\n  document,\n  type Suggestion,\n  suggestion,\n  type Message,\n  message,\n  vote,\n} from './schema';\nimport { BlockKind } from '@/components/block';\n\n// Optionally, if not using email/pass login, you can\n// use the Drizzle adapter for Auth.js / NextAuth\n// https://authjs.dev/reference/adapter/drizzle\n\n// biome-ignore lint: Forbidden non-null assertion.\nconst client = postgres(process.env.POSTGRES_URL!);\nconst db = drizzle(client);\n\nexport async function getUser(email: string): Promise<Array<User>> {\n  try {\n    return await db.select().from(user).where(eq(user.email, email));\n  } catch (error) {\n    console.error('Failed to get user from database');\n    throw error;\n  }\n}\n\nexport async function createUser(email: string, password: string) {\n  const salt = genSaltSync(10);\n  const hash = hashSync(password, salt);\n\n  try {\n    return await db.insert(user).values({ email, password: hash });\n  } catch (error) {\n    console.error('Failed to create user in database');\n    throw error;\n  }\n}\n\nexport async function saveChat({\n  id,\n  userId,\n  title,\n}: {\n  id: string;\n  userId: string;\n  title: string;\n}) {\n  try {\n    return await db.insert(chat).values({\n      id,\n      createdAt: new Date(),\n      userId,\n      title,\n    });\n  } catch (error) {\n    console.error('Failed to save chat in database');\n    throw error;\n  }\n}\n\nexport async function deleteChatById({ id }: { id: string }) {\n  try {\n    await db.delete(vote).where(eq(vote.chatId, id));\n    await db.delete(message).where(eq(message.chatId, id));\n\n    return await db.delete(chat).where(eq(chat.id, id));\n  } catch (error) {\n    console.error('Failed to delete chat by id from database');\n    throw error;\n  }\n}\n\nexport async function getChatsByUserId({ id }: { id: string }) {\n  try {\n    return await db\n      .select()\n      .from(chat)\n      .where(eq(chat.userId, id))\n      .orderBy(desc(chat.createdAt));\n  } catch (error) {\n    console.error('Failed to get chats by user from database');\n    throw error;\n  }\n}\n\nexport async function getChatById({ id }: { id: string }) {\n  try {\n    const [selectedChat] = await db.select().from(chat).where(eq(chat.id, id));\n    return selectedChat;\n  } catch (error) {\n    console.error('Failed to get chat by id from database');\n    throw error;\n  }\n}\n\nexport async function saveMessages({ messages }: { messages: Array<Message> }) {\n  try {\n    return await db.insert(message).values(messages);\n  } catch (error) {\n    console.error('Failed to save messages in database', error);\n    throw error;\n  }\n}\n\nexport async function getMessagesByChatId({ id }: { id: string }) {\n  try {\n    return await db\n      .select()\n      .from(message)\n      .where(eq(message.chatId, id))\n      .orderBy(asc(message.createdAt));\n  } catch (error) {\n    console.error('Failed to get messages by chat id from database', error);\n    throw error;\n  }\n}\n\nexport async function voteMessage({\n  chatId,\n  messageId,\n  type,\n}: {\n  chatId: string;\n  messageId: string;\n  type: 'up' | 'down';\n}) {\n  try {\n    const [existingVote] = await db\n      .select()\n      .from(vote)\n      .where(and(eq(vote.messageId, messageId)));\n\n    if (existingVote) {\n      return await db\n        .update(vote)\n        .set({ isUpvoted: type === 'up' })\n        .where(and(eq(vote.messageId, messageId), eq(vote.chatId, chatId)));\n    }\n    return await db.insert(vote).values({\n      chatId,\n      messageId,\n      isUpvoted: type === 'up',\n    });\n  } catch (error) {\n    console.error('Failed to upvote message in database', error);\n    throw error;\n  }\n}\n\nexport async function getVotesByChatId({ id }: { id: string }) {\n  try {\n    return await db.select().from(vote).where(eq(vote.chatId, id));\n  } catch (error) {\n    console.error('Failed to get votes by chat id from database', error);\n    throw error;\n  }\n}\n\nexport async function saveDocument({\n  id,\n  title,\n  kind,\n  content,\n  userId,\n}: {\n  id: string;\n  title: string;\n  kind: BlockKind;\n  content: string;\n  userId: string;\n}) {\n  try {\n    return await db.insert(document).values({\n      id,\n      title,\n      kind,\n      content,\n      userId,\n      createdAt: new Date(),\n    });\n  } catch (error) {\n    console.error('Failed to save document in database');\n    throw error;\n  }\n}\n\nexport async function getDocumentsById({ id }: { id: string }) {\n  try {\n    const documents = await db\n      .select()\n      .from(document)\n      .where(eq(document.id, id))\n      .orderBy(asc(document.createdAt));\n\n    return documents;\n  } catch (error) {\n    console.error('Failed to get document by id from database');\n    throw error;\n  }\n}\n\nexport async function getDocumentById({ id }: { id: string }) {\n  try {\n    const [selectedDocument] = await db\n      .select()\n      .from(document)\n      .where(eq(document.id, id))\n      .orderBy(desc(document.createdAt));\n\n    return selectedDocument;\n  } catch (error) {\n    console.error('Failed to get document by id from database');\n    throw error;\n  }\n}\n\nexport async function deleteDocumentsByIdAfterTimestamp({\n  id,\n  timestamp,\n}: {\n  id: string;\n  timestamp: Date;\n}) {\n  try {\n    await db\n      .delete(suggestion)\n      .where(\n        and(\n          eq(suggestion.documentId, id),\n          gt(suggestion.documentCreatedAt, timestamp),\n        ),\n      );\n\n    return await db\n      .delete(document)\n      .where(and(eq(document.id, id), gt(document.createdAt, timestamp)));\n  } catch (error) {\n    console.error(\n      'Failed to delete documents by id after timestamp from database',\n    );\n    throw error;\n  }\n}\n\nexport async function saveSuggestions({\n  suggestions,\n}: {\n  suggestions: Array<Suggestion>;\n}) {\n  try {\n    return await db.insert(suggestion).values(suggestions);\n  } catch (error) {\n    console.error('Failed to save suggestions in database');\n    throw error;\n  }\n}\n\nexport async function getSuggestionsByDocumentId({\n  documentId,\n}: {\n  documentId: string;\n}) {\n  try {\n    return await db\n      .select()\n      .from(suggestion)\n      .where(and(eq(suggestion.documentId, documentId)));\n  } catch (error) {\n    console.error(\n      'Failed to get suggestions by document version from database',\n    );\n    throw error;\n  }\n}\n\nexport async function getMessageById({ id }: { id: string }) {\n  try {\n    return await db.select().from(message).where(eq(message.id, id));\n  } catch (error) {\n    console.error('Failed to get message by id from database');\n    throw error;\n  }\n}\n\nexport async function deleteMessagesByChatIdAfterTimestamp({\n  chatId,\n  timestamp,\n}: {\n  chatId: string;\n  timestamp: Date;\n}) {\n  try {\n    return await db\n      .delete(message)\n      .where(\n        and(eq(message.chatId, chatId), gte(message.createdAt, timestamp)),\n      );\n  } catch (error) {\n    console.error(\n      'Failed to delete messages by id after timestamp from database',\n    );\n    throw error;\n  }\n}\n\nexport async function updateChatVisiblityById({\n  chatId,\n  visibility,\n}: {\n  chatId: string;\n  visibility: 'private' | 'public';\n}) {\n  try {\n    return await db.update(chat).set({ visibility }).where(eq(chat.id, chatId));\n  } catch (error) {\n    console.error('Failed to update chat visibility in database');\n    throw error;\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 495, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 501, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/app/%28auth%29/auth.config.ts"],"sourcesContent":["import type { NextAuthConfig } from 'next-auth';\n\nexport const authConfig = {\n  pages: {\n    signIn: '/login',\n    newUser: '/',\n  },\n  providers: [\n    // added later in auth.ts since it requires bcrypt which is only compatible with Node.js\n    // while this file is also used in non-Node.js environments\n  ],\n  callbacks: {\n    authorized({ auth, request: { nextUrl } }) {\n      const isLoggedIn = !!auth?.user;\n      const isOnChat = nextUrl.pathname.startsWith('/');\n      const isOnRegister = nextUrl.pathname.startsWith('/register');\n      const isOnLogin = nextUrl.pathname.startsWith('/login');\n\n      if (isLoggedIn && (isOnLogin || isOnRegister)) {\n        return Response.redirect(new URL('/', nextUrl as unknown as URL));\n      }\n\n      if (isOnRegister || isOnLogin) {\n        return true; // Always allow access to register and login pages\n      }\n\n      if (isOnChat) {\n        if (isLoggedIn) return true;\n        return false; // Redirect unauthenticated users to login page\n      }\n\n      if (isLoggedIn) {\n        return Response.redirect(new URL('/', nextUrl as unknown as URL));\n      }\n\n      return true;\n    },\n  },\n} satisfies NextAuthConfig;\n"],"names":[],"mappings":";;;AAEO,MAAM,aAAa;IACxB,OAAO;QACL,QAAQ;QACR,SAAS;IACX;IACA,WAAW,EAGV;IACD,WAAW;QACT,YAAW,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE;YACvC,MAAM,aAAa,CAAC,CAAC,MAAM;YAC3B,MAAM,WAAW,QAAQ,QAAQ,CAAC,UAAU,CAAC;YAC7C,MAAM,eAAe,QAAQ,QAAQ,CAAC,UAAU,CAAC;YACjD,MAAM,YAAY,QAAQ,QAAQ,CAAC,UAAU,CAAC;YAE9C,IAAI,cAAc,CAAC,aAAa,YAAY,GAAG;gBAC7C,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,KAAK;YACxC;YAEA,IAAI,gBAAgB,WAAW;gBAC7B,OAAO,MAAM,kDAAkD;YACjE;YAEA,IAAI,UAAU;gBACZ,IAAI,YAAY,OAAO;gBACvB,OAAO,OAAO,+CAA+C;YAC/D;YAEA,IAAI,YAAY;gBACd,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,KAAK;YACxC;YAEA,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 533, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 539, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/app/%28auth%29/auth.ts"],"sourcesContent":["import { compare } from 'bcrypt-ts';\nimport NextAuth, { type User, type Session } from 'next-auth';\nimport Credentials from 'next-auth/providers/credentials';\n\nimport { getUser } from '@/lib/db/queries';\n\nimport { authConfig } from './auth.config';\n\ninterface ExtendedSession extends Session {\n  user: User;\n}\n\nexport const {\n  handlers: { GET, POST },\n  auth,\n  signIn,\n  signOut,\n} = NextAuth({\n  ...authConfig,\n  providers: [\n    Credentials({\n      credentials: {},\n      async authorize({ email, password }: any) {\n        const users = await getUser(email);\n        if (users.length === 0) return null;\n        // biome-ignore lint: Forbidden non-null assertion.\n        const passwordsMatch = await compare(password, users[0].password!);\n        if (!passwordsMatch) return null;\n        return users[0] as any;\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n      }\n\n      return token;\n    },\n    async session({\n      session,\n      token,\n    }: {\n      session: ExtendedSession;\n      token: any;\n    }) {\n      if (session.user) {\n        session.user.id = token.id as string;\n      }\n\n      return session;\n    },\n  },\n});\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AAEA;AAEA;AALA;AACA;;;;;;AAUO,MAAM,EACX,UAAU,EAAE,GAAG,EAAE,IAAI,EAAE,EACvB,IAAI,EACJ,MAAM,EACN,OAAO,EACR,GAAG,CAAA,GAAA,uJAAA,CAAA,UAAQ,AAAD,EAAE;IACX,GAAG,mIAAA,CAAA,aAAU;IACb,WAAW;QACT,CAAA,GAAA,4JAAA,CAAA,UAAW,AAAD,EAAE;YACV,aAAa,CAAC;YACd,MAAM,WAAU,EAAE,KAAK,EAAE,QAAQ,EAAO;gBACtC,MAAM,QAAQ,MAAM,CAAA,GAAA,sHAAA,CAAA,UAAO,AAAD,EAAE;gBAC5B,IAAI,MAAM,MAAM,KAAK,GAAG,OAAO;gBAC/B,mDAAmD;gBACnD,MAAM,iBAAiB,MAAM,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,UAAU,KAAK,CAAC,EAAE,CAAC,QAAQ;gBAChE,IAAI,CAAC,gBAAgB,OAAO;gBAC5B,OAAO,KAAK,CAAC,EAAE;YACjB;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YAEA,OAAO;QACT;QACA,MAAM,SAAQ,EACZ,OAAO,EACP,KAAK,EAIN;YACC,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YAEA,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 588, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 594, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/lib/ai/custom-middleware.ts"],"sourcesContent":["import type { Experimental_LanguageModelV1Middleware } from 'ai';\n\nexport const customMiddleware: Experimental_LanguageModelV1Middleware = {};\n"],"names":[],"mappings":";;;AAEO,MAAM,mBAA2D,CAAC"}},
    {"offset": {"line": 598, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 604, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/lib/ai/index.ts"],"sourcesContent":["import { openai } from '@ai-sdk/openai';\nimport { experimental_wrapLanguageModel as wrapLanguageModel } from 'ai';\n\nimport { customMiddleware } from './custom-middleware';\n\nexport const customModel = (apiIdentifier: string) => {\n  return wrapLanguageModel({\n    model: openai(apiIdentifier),\n    middleware: customMiddleware,\n  });\n};\n"],"names":[],"mappings":";;;AAGA;AAFA;AADA;;;;AAKO,MAAM,cAAc,CAAC;IAC1B,OAAO,CAAA,GAAA,sJAAA,CAAA,iCAAiB,AAAD,EAAE;QACvB,OAAO,CAAA,GAAA,yJAAA,CAAA,SAAM,AAAD,EAAE;QACd,YAAY,mIAAA,CAAA,mBAAgB;IAC9B;AACF"}},
    {"offset": {"line": 619, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 625, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/lib/ai/models.ts"],"sourcesContent":["// Define your models here.\n\nexport interface Model {\n  id: string;\n  label: string;\n  apiIdentifier: string;\n  description: string;\n}\n\nexport const models: Array<Model> = [\n  {\n    id: 'gpt-4o-mini',\n    label: 'Star Trader',\n    apiIdentifier: 'gpt-4o-mini',\n    description: 'Star Trader - For all your Star Citizen Trading Needs.',\n  },\n] as const;\n\nexport const DEFAULT_MODEL_NAME: string = 'gpt-4o-mini';\n"],"names":[],"mappings":"AAAA,2BAA2B;;;;;AASpB,MAAM,SAAuB;IAClC;QACE,IAAI;QACJ,OAAO;QACP,eAAe;QACf,aAAa;IACf;CACD;AAEM,MAAM,qBAA6B"}},
    {"offset": {"line": 639, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 645, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/lib/ai/prompts.ts"],"sourcesContent":["export const regularPrompt =\n  `\n  General Rules\nData Reliability:\n\nUse the API to fetch data. If no data is available, inform the user explicitly. Never estimate prices.\nIf a buy price is 0, the commodity is out of stock at that location. Suggest another location with a price > 0.\nIf a sell price is 0, the commodity cannot be sold at that location. Recommend another location with a price > 0.\nMandatory Pre-Check Questions (Selling Only):\n\nWhat commodity are you selling?\nWhat is the quantity (in SCU)?\nWhere are you currently located?\n(Skip location details if the query is about the most profitable location.)\nKnowledge Base: Up to date with Star Citizen Alpha 4.0.\n\nBot Name: Refer to the bot as Star Trader when asked.\n\nResponse Structure\nFinding the Best Terminal to Sell\nUse getCommodityPrices.\nProvide:\nSell location.\nSell price for 1 SCU.\nTotal sell price for user-provided SCU amount (if given).\nIgnore sell prices of 0.\nFinding the Best Terminal to Buy\nUse getCommodityPrices.\nProvide:\nBuy location.\nBuy price for 1 SCU.\nTotal buy price for user-provided SCU amount (if given).\nIgnore buy prices of 0.\nPlanning a Trade Route\nAsk for the commodity name and SCU capacity (if any).\nUse getCommodityPrices or getTerminals to:\nFind the cheapest buy location with sufficient stock.\nFind the most profitable sell location ensuring SCU stock availability.\nProvide terminal and location details for both buy and sell.\nFinding the Most Profitable Commodity\nUse getCommoditiesPricesAll.\nDetermine the best profit margin.\nEnsure sufficient stock for the buy location to meet user SCU requirements.\nSuggest multiple pick-up locations if needed.\nFallback Strategies\nExpand Scope:\n\nQuery all terminals in the star system.\nUse getCommoditiesPricesAll or getTerminals with no parameters.\nProvide Alternatives:\n\nRecommend profitable commodities or trading strategies.\nSuggest alternate buy/sell locations.\nRefine Queries:\n\nAdapt API calls to handle missing or excessive data.\nError Handling\nData Gaps:\n\nClearly state if data is unavailable.\nSuggest alternatives, ensuring profitability.\nUser-Reported Errors:\n\nEncourage users to join the UEXCORP Data Runner program: uexcorp.space/data/signup\nCritical Instructions\nProfitability:\n\nAll recommendations must rely on API data.\nUse fallback storage data only if API data is unavailable.\nAPI-Driven Responses:\n\nAlways verify buy/sell prices using the API.\nToken Efficiency:\n\nKeep responses concise (<10,000 tokens).\nScope:\n\nFocus exclusively on Star Citizen and UEXCORP.Space trading.\nAvoid discussing unrelated topics.\nDonation Links\nDonate to Daniel: ko-fi.com/danielvnz\nBot Source Code: github.com/DanielVNZ/startrader\nUEXCORP Donations:\nKo-fi: ko-fi.com/uexcorp\nPatreon: patreon.com/uexcorp\n`;\n\nexport const systemPrompt = `${regularPrompt}`;\n\n\n"],"names":[],"mappings":";;;;AAAO,MAAM,gBACX,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFH,CAAC;AAEM,MAAM,eAAe,GAAG,eAAe"}},
    {"offset": {"line": 735, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 741, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/lib/utils.ts"],"sourcesContent":["import type {\n  CoreAssistantMessage,\n  CoreMessage,\n  CoreToolMessage,\n  Message,\n  ToolInvocation,\n} from 'ai';\nimport { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nimport type { Message as DBMessage, Document } from '@/lib/db/schema';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\ninterface ApplicationError extends Error {\n  info: string;\n  status: number;\n}\n\nexport const fetcher = async (url: string) => {\n  const res = await fetch(url);\n\n  if (!res.ok) {\n    const error = new Error(\n      'An error occurred while fetching the data.',\n    ) as ApplicationError;\n\n    error.info = await res.json();\n    error.status = res.status;\n\n    throw error;\n  }\n\n  return res.json();\n};\n\nexport function getLocalStorage(key: string) {\n  if (typeof window !== 'undefined') {\n    return JSON.parse(localStorage.getItem(key) || '[]');\n  }\n  return [];\n}\n\nexport function generateUUID(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n\n\n\nexport function convertToUIMessages(\n  messages: Array<DBMessage>,\n): Array<Message> {\n  return messages.reduce((chatMessages: Array<Message>, message) => {\n    if (message.role === 'tool') {\n      return chatMessages; // Exclude tool messages from UI messages\n    }\n\n    let textContent = '';\n    const toolInvocations: Array<ToolInvocation> = [];\n\n    if (typeof message.content === 'string') {\n      textContent = message.content;\n    } else if (Array.isArray(message.content)) {\n      for (const content of message.content) {\n        if (content.type === 'text') {\n          textContent += content.text;\n        } else if (content.type === 'tool-call') {\n          toolInvocations.push({\n            state: 'call',\n            toolCallId: content.toolCallId,\n            toolName: content.toolName,\n            args: content.args,\n          });\n        }\n      }\n    }\n\n    chatMessages.push({\n      id: message.id,\n      role: message.role as Message['role'],\n      content: textContent,\n      toolInvocations,\n    });\n\n    return chatMessages;\n  }, []);\n}\n\nexport function sanitizeResponseMessages(\n  messages: Array<CoreToolMessage | CoreAssistantMessage>,\n): Array<CoreToolMessage | CoreAssistantMessage> {\n  const toolResultIds: Array<string> = [];\n\n  for (const message of messages) {\n    console.log('Sanitizing messages:', messages);\n    if (message.role === 'tool') {\n      for (const content of message.content) {\n       if (content.type === 'tool-result') {\n          toolResultIds.push(content.toolCallId);\n        }\n     }\n    }\n  }\n\n  const messagesBySanitizedContent = messages.map((message) => {\n    if (message.role !== 'assistant') return message;\n\n    if (typeof message.content === 'string') return message;\n\n    const sanitizedContent = message.content.filter((content) =>\n      content.type === 'tool-call'\n        ? toolResultIds.includes(content.toolCallId)\n        : content.type === 'text'\n          ? content.text.length > 0\n          : true,\n    );\n\n    return {\n      ...message,\n      content: sanitizedContent,\n    };\n  });\n  return messagesBySanitizedContent; \n  //return messagesBySanitizedContent.filter(\n  //  (message) => message.content.length > 0,\n  //);\n}\n\n\n\nexport function sanitizeUIMessages(messages: Array<Message>): Array<Message> {\n  const messagesBySanitizedToolInvocations = messages.map((message) => {\n    if (message.role !== 'assistant') return message;\n\n    if (!message.toolInvocations) return message;\n\n    const toolResultIds: Array<string> = [];\n\n    for (const toolInvocation of message.toolInvocations) {\n      if (toolInvocation.state === 'result') {\n        toolResultIds.push(toolInvocation.toolCallId);\n      }\n    }\n\n    const sanitizedToolInvocations = message.toolInvocations.filter(\n      (toolInvocation) =>\n        toolInvocation.state === 'result' ||\n        toolResultIds.includes(toolInvocation.toolCallId),\n    );\n\n    return {\n      ...message,\n      toolInvocations: sanitizedToolInvocations,\n    };\n  });\n\n  return messagesBySanitizedToolInvocations.filter(\n    (message) =>\n      message.content.length > 0 ||\n      (message.toolInvocations && message.toolInvocations.length > 0),\n  );\n}\n\nexport function getMostRecentUserMessage(messages: Array<CoreMessage>) {\n  const userMessages = messages.filter((message) => message.role === 'user');\n  return userMessages.at(-1);\n}\n\nexport function getDocumentTimestampByIndex(\n  documents: Array<Document>,\n  index: number,\n) {\n  if (!documents) return new Date();\n  if (index > documents.length) return new Date();\n\n  return documents[index].createdAt;\n}\n\nexport function getMessageIdFromAnnotations(message: Message) {\n  if (!message.annotations) return message.id;\n\n  const [annotation] = message.annotations;\n  if (!annotation) return message.id;\n\n  // @ts-expect-error messageIdFromServer is not defined in MessageAnnotation\n  return annotation.messageIdFromServer;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 875, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 881, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/app/%28chat%29/api/chat/tools.ts"],"sourcesContent":["import { z } from \"zod\";\n\n\nexport const tools = {\n\n  getCommodities: {\n    description: \"Retrieve a list of all commodities.\",\n    parameters: z.object({}),\n    execute: async (_args: {}) => {\n      console.log(\"Fetching commodities...\");\n  \n      const apiUrl = \"https://api.uexcorp.space/2.0/commodities\";\n  \n      try {\n        const response = await fetch(apiUrl);\n        if (!response.ok) {\n          console.error(\"Failed to fetch commodities:\", response.statusText);\n          return { error: `Failed to fetch data: ${response.statusText}` };\n        }\n  \n        const responseData = await response.json();\n        \n  \n        // Define Zod schema for validation\n        const schema = z.object({\n          status: z.literal(\"ok\"),\n          data: z.array(\n            z.object({\n              id: z.number().nullable(),\n              id_parent: z.number().nullable(),\n              name: z.string().nullable(),\n              code: z.string().nullable(),\n              kind: z.string().nullable(),\n              weight_scu: z.number().nullable(),\n              price_buy: z.number().nullable(),\n              price_sell: z.number().nullable(),\n              is_available: z.number().nullable(),\n              is_available_live: z.number().nullable(),\n              is_visible: z.number().nullable(),\n              is_mineral: z.number().nullable(),\n              is_raw: z.number().nullable(),\n              is_refined: z.number().nullable(),\n              is_harvestable: z.number().nullable(),\n              is_buyable: z.number().nullable(),\n              is_sellable: z.number().nullable(),\n              is_temporary: z.number().nullable(),\n              is_illegal: z.number().nullable(),\n              is_fuel: z.number().nullable(),\n              wiki: z.string().nullable(),\n              date_added: z.number().nullable(),\n              date_modified: z.number().nullable(),\n            })\n          ),\n        });\n  \n        // Validate the response data against the schema\n        const parsedData = schema.safeParse(responseData);\n        if (!parsedData.success) {\n          console.warn(\"Invalid data format:\", parsedData.error.errors);\n          return { error: \"Invalid data format received from the API.\" };\n        }\n  \n        const data = parsedData.data.data; // Extract validated data\n        console.log(`Fetched ${data.length} commodities.`);\n  \n        // Chunk the data into smaller parts if necessary\n        const chunkSize = 150;\n        const chunks = [];\n        for (let i = 0; i < data.length; i += chunkSize) {\n          chunks.push(data.slice(i, i + chunkSize));\n        }\n  \n        console.log(`Chunked data into ${chunks.length} chunks of size ${chunkSize}`);\n        return { result: chunks };\n      } catch (error) {\n        console.error(\"Error fetching commodities:\", error);\n        return { error: \"An unexpected error occurred while fetching commodities.\" };\n      }\n    },\n  },  \n\n  getStarSystems: {\n    description: \"Retrieve a list of star systems.\",\n    parameters: z.object({}),\n    execute: async () => {\n      console.log(\"Fetching star systems...\");\n  \n      try {\n        const response = await fetch(`https://api.uexcorp.space/2.0/star_systems`);\n        if (!response.ok) {\n          console.error(\"Failed to fetch star systems:\", response.statusText);\n          return { error: `Failed to fetch data: ${response.statusText}` };\n        }\n  \n        const responseData = await response.json();\n        \n  \n        if (responseData.status !== \"ok\" || !Array.isArray(responseData.data)) {\n          console.warn(\"Star systems API returned empty or invalid data:\", responseData);\n          return { error: \"No valid data available in response.\" };\n        }\n  \n        const data = responseData.data; // Extract the actual array\n        console.log(`Fetched ${data.length} entries from star systems API`);\n  \n        const chunkSize = 200; // Define the size of each chunk\n        const chunks = [];\n  \n        // Create chunks from the data\n        for (let i = 0; i < data.length; i += chunkSize) {\n          chunks.push(data.slice(i, i + chunkSize));\n        }\n  \n        console.log(`Chunked data into ${chunks.length} chunks of size ${chunkSize}`);\n        return { result: chunks }; // Return the data in chunks\n      } catch (error) {\n        console.error(\"Error fetching star systems:\", error);\n        return { error: \"An unexpected error occurred\" };\n      }\n    },\n  },  \n\n  getSpaceStations: {\n    description: \"Retrieve a list of space stations.\",\n    parameters: z.object({}),\n    execute: async () => {\n      console.log(\"Fetching space stations...\");\n  \n      try {\n        const response = await fetch(`https://api.uexcorp.space/2.0/space_stations`);\n        if (!response.ok) {\n          console.error(\"Failed to fetch space stations:\", response.statusText);\n          return { error: `Failed to fetch data: ${response.statusText}` };\n        }\n  \n        const responseData = await response.json();\n        \n  \n        if (responseData.status !== \"ok\" || !Array.isArray(responseData.data)) {\n          console.warn(\"Space stations API returned empty or invalid data:\", responseData);\n          return { error: \"No valid data available in response.\" };\n        }\n  \n        const data = responseData.data; // Extract the actual array\n        console.log(`Fetched ${data.length} entries from space stations API`);\n  \n        const chunkSize = 200; // Define the size of each chunk\n        const chunks = [];\n  \n        // Create chunks from the data\n        for (let i = 0; i < data.length; i += chunkSize) {\n          chunks.push(data.slice(i, i + chunkSize));\n        }\n  \n        console.log(`Chunked data into ${chunks.length} chunks of size ${chunkSize}`);\n        return { result: chunks }; // Return the data in chunks\n      } catch (error) {\n        console.error(\"Error fetching space stations:\", error);\n        return { error: \"An unexpected error occurred\" };\n      }\n    },\n  },\n  \n\n  getCommodityPrices: {\n    description: \"Retrieve commodity prices for a specific commodity or location. Use this tool to help a user find  the best sell or buy location for a specific commodity.\",\n    parameters: z.object({\n      // commodity_name: z.string().optional(),\n      id_commodity: z.number().optional(),\n    }),\n    execute: async (args: {\n      // commodity_name?: string;\n      id_commodity?: number;\n    }) => {\n      console.log(\"Fetching commodity prices with arguments:\", args);\n  \n      // Construct query parameters dynamically\n      const queryParams = new URLSearchParams();\n      Object.entries(args).forEach(([key, value]) => {\n        if (value !== undefined) {\n          queryParams.append(key, value.toString());\n        }\n      });\n  \n      const apiUrl = `https://api.uexcorp.space/2.0/commodities_prices?${queryParams.toString()}`;\n      console.log(\"API URL:\", apiUrl);\n  \n      try {\n        const response = await fetch(apiUrl);\n        if (!response.ok) {\n          console.error(\"Failed to fetch commodity prices:\", response.statusText);\n          return { error: `Failed to fetch data: ${response.statusText}` };\n        }\n  \n        const responseData = await response.json();\n        \n  \n        // Updated Zod schema with all fields nullable\n        const schema = z.object({\n          status: z.literal(\"ok\"),\n          data: z.array(\n            z.object({\n              id: z.number().nullable(),\n              id_commodity: z.number().nullable(),\n              id_terminal: z.number().nullable(),\n              id_star_system: z.number().nullable(),\n              id_planet: z.number().nullable(),\n              id_orbit: z.number().nullable(),\n              id_moon: z.number().nullable(),\n              id_city: z.number().nullable(),\n              id_outpost: z.number().nullable(),\n              id_poi: z.number().nullable(),\n              id_faction: z.number().nullable(),\n              price_buy: z.number().nullable(),\n              price_buy_min: z.number().nullable(),\n              price_buy_max: z.number().nullable(),\n              price_buy_avg: z.number().nullable(),\n              price_sell: z.number().nullable(),\n              price_sell_min: z.number().nullable(),\n              price_sell_max: z.number().nullable(),\n              price_sell_avg: z.number().nullable(),\n              scu_buy: z.number().nullable(),\n              scu_sell: z.number().nullable(),\n              scu_sell_stock: z.number().nullable(),\n              status_buy: z.number().nullable(),\n              status_sell: z.number().nullable(),\n              volatility_price_buy: z.number().nullable(),\n              volatility_price_sell: z.number().nullable(),\n              commodity_name: z.string().nullable(),\n              commodity_code: z.string().nullable(),\n              commodity_slug: z.string().nullable(),\n              terminal_name: z.string().nullable(),\n              terminal_code: z.string().nullable(),\n              terminal_slug: z.string().nullable(),\n              star_system_name: z.string().nullable(),\n              planet_name: z.string().nullable(),\n              orbit_name: z.string().nullable(),\n              moon_name: z.string().nullable(),\n              space_station_name: z.string().nullable(),\n              city_name: z.string().nullable(),\n              outpost_name: z.string().nullable(),\n              game_version: z.string().nullable(),\n              date_added: z.number().nullable(),\n              date_modified: z.number().nullable(),\n            })\n          ),\n        });\n  \n        const parsedData = schema.safeParse(responseData);\n        if (!parsedData.success) {\n          console.warn(\"Invalid data format:\", parsedData.error.errors);\n          return { error: \"Invalid data format received from the API.\" };\n        }\n  \n        const data = parsedData.data.data; // Extract validated data\n        console.log(`Fetched ${data.length} commodity price records.`);\n  \n        return { result: data };\n      } catch (error) {\n        console.error(\"Error fetching commodity prices:\", error);\n        return { error: \"An unexpected error occurred while fetching commodity prices.\" };\n      }\n    },\n  },  \n  \n\n  getCities: {\n    description: \"Retrieve a list of cities. Stanton star system ID is 68. Pyro star system ID is 64\",\n    parameters: z.object({\n      id_star_system: z.number().optional(),\n    }),\n    additionalProperties: false,\n    execute: async (args: { id_star_system?: number }) => {\n      console.log(\"Fetching cities with arguments:\", args);\n  \n      const queryParams = new URLSearchParams();\n      if (args.id_star_system !== undefined) {\n        queryParams.append(\"id_star_system\", args.id_star_system.toString());\n      }\n         \n  \n      console.log(\"Query parameters for cities API:\", queryParams.toString());\n  \n      try {\n        const response = await fetch(`https://api.uexcorp.space/2.0/cities?${queryParams.toString()}`);\n        if (!response.ok) {\n          console.error(\"Failed to fetch cities:\", response.statusText);\n          return { error: `Failed to fetch data: ${response.statusText}` };\n        }\n  \n        const responseData = await response.json();\n        \n  \n        if (responseData.status !== 'ok' || !Array.isArray(responseData.data)) {\n          console.warn(\"Cities API returned empty or invalid data:\", responseData);\n          return { error: \"No valid data available in response.\" };\n        }\n  \n        const data = responseData.data; // Extract the actual array\n        console.log(`Fetched ${data.length} entries from cities API`);\n  \n        const chunkSize = 200; // Define the size of each chunk\n        const chunks = [];\n  \n        // Create chunks from the data\n        for (let i = 0; i < data.length; i += chunkSize) {\n          chunks.push(data.slice(i, i + chunkSize));\n        }\n  \n        console.log(`Chunked data into ${chunks.length} chunks of size ${chunkSize}`);\n        return { result: chunks }; // Return the data in chunks\n      } catch (error) {\n        console.error(\"Error fetching cities:\", error);\n        return { error: \"An unexpected error occurred\" };\n      }\n    },\n  },  \n\n  getMoons: {\n    description: \"Retrieve a list of moons.\",\n    parameters: z.object({\n      id_star_system: z.number().optional(),\n      id_planet: z.number().optional(),\n    }),\n    execute: async (args: { id_star_system?: number; id_planet?: number }) => {\n      console.log(\"Fetching moons with arguments:\", args);\n  \n      const queryParams = new URLSearchParams();\n      if (args.id_star_system !== undefined) queryParams.append(\"id_star_system\", args.id_star_system.toString());\n      if (args.id_planet !== undefined) queryParams.append(\"id_planet\", args.id_planet.toString());\n  \n      console.log(\"Query parameters for moons API:\", queryParams.toString());\n  \n      try {\n        const response = await fetch(`https://api.uexcorp.space/2.0/moons?${queryParams.toString()}`);\n        if (!response.ok) {\n          console.error(\"Failed to fetch moons:\", response.statusText);\n          return { error: `Failed to fetch data: ${response.statusText}` };\n        }\n  \n        const responseData = await response.json();\n        \n  \n        if (responseData.status !== 'ok' || !Array.isArray(responseData.data)) {\n          console.warn(\"Moons API returned empty or invalid data:\", responseData);\n          return { error: \"No valid data available in response.\" };\n        }\n  \n        const data = responseData.data; // Extract the actual array\n        console.log(`Fetched ${data.length} entries from moons API`);\n  \n        const chunkSize = 200; // Define the size of each chunk\n        const chunks = [];\n  \n        // Create chunks from the data\n        for (let i = 0; i < data.length; i += chunkSize) {\n          chunks.push(data.slice(i, i + chunkSize));\n        }\n  \n        console.log(`Chunked data into ${chunks.length} chunks of size ${chunkSize}`);\n        return { result: chunks }; // Return the data in chunks\n      } catch (error) {\n        console.error(\"Error fetching moons:\", error);\n        return { error: \"An unexpected error occurred\" };\n      }\n    },\n  },  \n\n  getOrbits: {\n    description: \"Retrieve a list of orbits.\",\n    parameters: z.object({\n      id_star_system: z.number().optional(),\n    }),\n    execute: async (args: {\n      id_star_system?: number;\n    }) => {\n      console.log(\"Fetching orbits with arguments:\", args);\n  \n      // Construct query parameters dynamically\n      const queryParams = new URLSearchParams();\n      Object.entries(args).forEach(([key, value]) => {\n        if (value !== undefined) {\n          queryParams.append(key, value.toString());\n        }\n      });\n  \n      const queryString = queryParams.toString();\n      const apiUrl = `https://api.uexcorp.space/2.0/orbits${queryString ? `?${queryString}` : ''}`;\n      console.log(\"API URL:\", apiUrl);\n  \n      try {\n        const response = await fetch(apiUrl);\n        if (!response.ok) {\n          console.error(\"Failed to fetch orbits:\", response.statusText);\n          return { error: `Failed to fetch data: ${response.statusText}` };\n        }\n  \n        const responseData = await response.json();\n        \n  \n        // Define Zod schema for validation\n        const schema = z.object({\n          status: z.literal(\"ok\"),\n          data: z.array(\n            z.object({\n              id: z.number(),\n              id_star_system: z.number().nullable(),\n              id_faction: z.number().nullable(),\n              id_jurisdiction: z.number().nullable(),\n              name: z.string(),\n              name_origin: z.string().nullable(),\n              code: z.string().nullable(),\n              is_available: z.number().nullable(),\n              is_available_live: z.number().nullable(),\n              is_visible: z.number().nullable(),\n              is_default: z.number().nullable(),\n              is_lagrange: z.number().nullable(),\n              is_man_made: z.number().nullable(),\n              is_asteroid: z.number().nullable(),\n              is_planet: z.number().nullable(),\n              is_star: z.number().nullable(),\n              date_added: z.number().nullable(),\n              date_modified: z.number().nullable(),\n              star_system_name: z.string().nullable(),\n              faction_name: z.string().nullable(),\n              jurisdiction_name: z.string().nullable(),\n            })\n          ),\n        });\n  \n        // Validate the response data against the schema\n        const parsedData = schema.safeParse(responseData);\n        if (!parsedData.success) {\n          console.warn(\"Invalid data format:\", parsedData.error.errors);\n          return { error: \"Invalid data format received from the API.\" };\n        }\n  \n        const data = parsedData.data.data; // Extract validated data\n        console.log(`Fetched ${data.length} entries from orbits API.`);\n  \n        // Chunk the data into smaller parts if necessary\n        const chunkSize = 200;\n        const chunks = [];\n        for (let i = 0; i < data.length; i += chunkSize) {\n          chunks.push(data.slice(i, i + chunkSize));\n        }\n  \n        console.log(`Chunked data into ${chunks.length} chunks of size ${chunkSize}`);\n        return { result: chunks };\n      } catch (error) {\n        console.error(\"Error fetching orbits:\", error);\n        return { error: \"An unexpected error occurred while fetching orbits.\" };\n      }\n    },\n  },    \n\n  getOutposts: {\n    description: \"Retrieve a list of outposts.\",\n    parameters: z.object({\n      id_star_system: z.number().optional(),\n      id_faction: z.number().optional(),\n      id_jurisdiction: z.number().optional(),\n      id_planet: z.number().optional(),\n      id_orbit: z.number().optional(),\n      id_moon: z.number().optional(),\n    }),\n    execute: async (args: {\n      id_star_system?: number;\n      id_faction?: number;\n      id_jurisdiction?: number;\n      id_planet?: number;\n      id_orbit?: number;\n      id_moon?: number;\n    }) => {\n      console.log(\"Fetching outposts with arguments:\", args);\n  \n      // Construct query parameters dynamically\n      const queryParams = new URLSearchParams();\n      Object.entries(args).forEach(([key, value]) => {\n        if (value !== undefined) {\n          queryParams.append(key, value.toString());\n        }\n      });\n  \n      const queryString = queryParams.toString();\n      const apiUrl = `https://api.uexcorp.space/2.0/outposts${queryString ? `?${queryString}` : ''}`;\n      console.log(\"API URL:\", apiUrl);\n  \n      try {\n        const response = await fetch(apiUrl);\n        if (!response.ok) {\n          console.error(\"Failed to fetch outposts:\", response.statusText);\n          return { error: `Failed to fetch data: ${response.statusText}` };\n        }\n  \n        const responseData = await response.json();\n        \n  \n        // Define Zod schema for validation\n        const schema = z.object({\n          status: z.literal(\"ok\"),\n          data: z.array(\n            z.object({\n              id: z.number(),\n              id_star_system: z.number().nullable(),\n              id_planet: z.number().nullable(),\n              id_orbit: z.number().nullable(),\n              id_moon: z.number().nullable(),\n              id_faction: z.number().nullable(),\n              id_jurisdiction: z.number().nullable(),\n              name: z.string(),\n              nickname: z.string().nullable(),\n              is_available: z.number().nullable(),\n              is_available_live: z.number().nullable(),\n              is_visible: z.number().nullable(),\n              is_default: z.number().nullable(),\n              is_monitored: z.number().nullable(),\n              is_armistice: z.number().nullable(),\n              is_landable: z.number().nullable(),\n              is_decommissioned: z.number().nullable(),\n              has_quantum_marker: z.number().nullable(),\n              has_trade_terminal: z.number().nullable(),\n              has_habitation: z.number().nullable(),\n              has_refinery: z.number().nullable(),\n              has_cargo_center: z.number().nullable(),\n              has_clinic: z.number().nullable(),\n              has_food: z.number().nullable(),\n              has_shops: z.number().nullable(),\n              has_refuel: z.number().nullable(),\n              has_repair: z.number().nullable(),\n              has_gravity: z.number().nullable(),\n              has_loading_dock: z.number().nullable(),\n              has_docking_port: z.number().nullable(),\n              has_freight_elevator: z.number().nullable(),\n              pad_types: z.string().nullable(),\n              date_added: z.number().nullable(),\n              date_modified: z.number().nullable(),\n              star_system_name: z.string().nullable(),\n              planet_name: z.string().nullable(),\n              orbit_name: z.string().nullable(),\n              moon_name: z.string().nullable(),\n              faction_name: z.string().nullable(),\n              jurisdiction_name: z.string().nullable(),\n            })\n          ),\n        });\n  \n        // Validate the response data against the schema\n        const parsedData = schema.safeParse(responseData);\n        if (!parsedData.success) {\n          console.warn(\"Invalid data format:\", parsedData.error.errors);\n          return { error: \"Invalid data format received from the API.\" };\n        }\n  \n        const data = parsedData.data.data; // Extract validated data\n        console.log(`Fetched ${data.length} entries from outposts API.`);\n  \n        // Chunk the data into smaller parts if necessary\n        const chunkSize = 1000;\n        const chunks = [];\n        for (let i = 0; i < data.length; i += chunkSize) {\n          chunks.push(data.slice(i, i + chunkSize));\n        }\n  \n        console.log(`Chunked data into ${chunks.length} chunks of size ${chunkSize}`);\n        return { result: chunks };\n      } catch (error) {\n        console.error(\"Error fetching outposts:\", error);\n        return { error: \"An unexpected error occurred while fetching outposts.\" };\n      }\n    },\n  },\n  \n\n  getPlanets: {\n    description: \"Retrieve a list of planets.\",\n    parameters: z.object({\n      id_star_system: z.number().optional(),\n    }),\n    execute: async (args: { id_star_system?: number }) => {\n      console.log(\"Fetching planets with arguments:\", args);\n  \n      const queryParams = new URLSearchParams();\n      if (args.id_star_system !== undefined) {\n        queryParams.append(\"id_star_system\", args.id_star_system.toString());\n      }\n  \n      const queryString = queryParams.toString();\n      const apiUrl = `https://api.uexcorp.space/2.0/planets${queryString ? `?${queryString}` : ''}`;\n  \n      console.log(\"Query parameters for planets API:\", queryString);\n      console.log(\"API URL:\", apiUrl);\n  \n      try {\n        const response = await fetch(apiUrl);\n        if (!response.ok) {\n          console.error(\"Failed to fetch planets:\", response.statusText);\n          return { error: `Failed to fetch data: ${response.statusText}` };\n        }\n  \n        const responseData = await response.json();\n        \n  \n        if (responseData.status !== 'ok' || !Array.isArray(responseData.data)) {\n          console.warn(\"Planets API returned empty or invalid data:\", responseData);\n          return { error: \"No valid data available in response.\" };\n        }\n  \n        const data = responseData.data;\n        console.log(`Fetched ${data.length} entries from planets API`);\n  \n        const chunkSize = 200;\n        const chunks = [];\n        for (let i = 0; i < data.length; i += chunkSize) {\n          chunks.push(data.slice(i, i + chunkSize));\n        }\n  \n        console.log(`Chunked data into ${chunks.length} chunks of size ${chunkSize}`);\n        return { result: chunks };\n      } catch (error) {\n        console.error(\"Error fetching planets:\", error);\n        return { error: \"An unexpected error occurred\" };\n      }\n    },\n  },\n  \n\n};\n\nexport type Instruction = string;\n\nexport type Commodity = {\n  id: string;\n  name: string;\n  code: string;\n};\n\nexport type Location = {\n  id: string;\n  starSystem_id: string;\n  planet_id: string;\n  moon_id: string;\n  spaceStation_id: string;\n  outpost_id: string;\n  city_id: string;\n  name: string;\n  starSystem_name: string;\n  planet_name: string;\n  moon_name: string;\n  spaceStation_name: string;\n  city_name: string;\n};\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1464, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1470, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/app/%28chat%29/actions.ts"],"sourcesContent":["'use server';\n\nimport { type CoreUserMessage, generateText } from 'ai';\nimport { cookies } from 'next/headers';\n\nimport { customModel } from '@/lib/ai';\nimport {\n  deleteMessagesByChatIdAfterTimestamp,\n  getMessageById,\n  updateChatVisiblityById,\n} from '@/lib/db/queries';\nimport { VisibilityType } from '@/components/visibility-selector';\n\nexport async function saveModelId(model: string) {\n  const cookieStore = await cookies();\n  cookieStore.set('model-id', model);\n}\n\nexport async function generateTitleFromUserMessage({\n  message,\n}: {\n  message: CoreUserMessage;\n}) {\n  const { text: title } = await generateText({\n    model: customModel('gpt-4o-mini'),\n    system: `\\n\n    - you will generate a short title based on the first message a user begins a conversation with\n    - ensure it is not more than 80 characters long\n    - the title should be a summary of the user's message\n    - do not use quotes or colons`,\n    prompt: JSON.stringify(message),\n  });\n\n  return title;\n}\n\nexport async function deleteTrailingMessages({ id }: { id: string }) {\n  const [message] = await getMessageById({ id });\n\n  await deleteMessagesByChatIdAfterTimestamp({\n    chatId: message.chatId,\n    timestamp: message.createdAt,\n  });\n}\n\nexport async function updateChatVisibility({\n  chatId,\n  visibility,\n}: {\n  chatId: string;\n  visibility: VisibilityType;\n}) {\n  await updateChatVisiblityById({ chatId, visibility });\n}\n"],"names":[],"mappings":";;;;;;;;AAGA;AAEA;AACA;;AAJA;;;;;;;AAWO,eAAe,uCAAS,GAAT,YAAY,KAAa;IAC7C,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAChC,YAAY,GAAG,CAAC,YAAY;AAC9B;AAEO,eAAe,uCAA0B,GAA1B,6BAA6B,EACjD,OAAO,EAGR;IACC,MAAM,EAAE,MAAM,KAAK,EAAE,GAAG,MAAM,CAAA,GAAA,sJAAA,CAAA,eAAY,AAAD,EAAE;QACzC,OAAO,CAAA,GAAA,oHAAA,CAAA,cAAW,AAAD,EAAE;QACnB,QAAQ,CAAC;;;;iCAIoB,CAAC;QAC9B,QAAQ,KAAK,SAAS,CAAC;IACzB;IAEA,OAAO;AACT;AAEO,eAAe,uCAAoB,GAApB,uBAAuB,EAAE,EAAE,EAAkB;IACjE,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAA,GAAA,sHAAA,CAAA,iBAAc,AAAD,EAAE;QAAE;IAAG;IAE5C,MAAM,CAAA,GAAA,sHAAA,CAAA,uCAAoC,AAAD,EAAE;QACzC,QAAQ,QAAQ,MAAM;QACtB,WAAW,QAAQ,SAAS;IAC9B;AACF;AAEO,eAAe,uCAAkB,GAAlB,qBAAqB,EACzC,MAAM,EACN,UAAU,EAIX;IACC,MAAM,CAAA,GAAA,sHAAA,CAAA,0BAAuB,AAAD,EAAE;QAAE;QAAQ;IAAW;AACrD;;;IAxCsB;IAKA;IAkBA;IASA;;AAhCA,iPAAA;AAKA,iPAAA;AAkBA,iPAAA;AASA,iPAAA"}},
    {"offset": {"line": 1531, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1577, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/danie/source/repos/StarTraderTest/app/%28chat%29/api/chat/route.ts"],"sourcesContent":["import {\n  type Message,\n  convertToCoreMessages,\n  createDataStreamResponse,\n  streamText,\n} from 'ai';\n\nimport { auth } from '@/app/(auth)/auth';\nimport { customModel } from '@/lib/ai';\nimport { models } from '@/lib/ai/models';\nimport { systemPrompt } from '@/lib/ai/prompts';\nimport {\n  deleteChatById,\n  getChatById,\n  saveChat,\n  saveMessages,\n} from '@/lib/db/queries';\nimport {\n  generateUUID,\n  getMostRecentUserMessage,\n  sanitizeResponseMessages,\n} from '@/lib/utils';\n\nimport { tools } from './tools';\n\nimport { generateTitleFromUserMessage } from '../../actions';\n\n\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.SUPABASE_URL || '';\nconst supabaseKey = process.env.SUPABASE_ANON_KEY || '';\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nexport const maxDuration = 60;\n\ntype AllowedTools =\n  | 'getCommodities'\n  | 'getCommodityPrices'\n  | 'getCities'\n  | 'getMoons'\n  | 'getOrbits'\n  | 'getOutposts'\n  | 'getPlanets'\n  | 'getStarSystems'\n  | 'getSpaceStations';\n\nconst myTools: AllowedTools[] = [\n  'getCommodities',\n  'getCommodityPrices',\n  'getCities',\n  'getMoons',\n  'getOrbits',\n  'getOutposts',\n  'getPlanets',\n  'getStarSystems',\n  'getSpaceStations',\n];\n\nconst allTools: AllowedTools[] = [...myTools];\n\nexport async function POST(request: Request) {\n  const {\n    id,\n    messages,\n    modelId,\n  }: { id: string; messages: Array<Message>; modelId: string } = await request.json();\n\n  const session = await auth();\n\n  if (!session || !session.user || !session.user.id) {\n    return new Response('Unauthorized', { status: 401 });\n  }\n\n  const model = models.find((model) => model.id === modelId);\n\n  if (!model) {\n    return new Response('Model not found', { status: 404 });\n  }\n\n  const coreMessages = convertToCoreMessages(messages);\n  const userMessage = getMostRecentUserMessage(coreMessages);\n\n  if (!userMessage) {\n    return new Response('No user message found', { status: 400 });\n  }\n\n  const chat = await getChatById({ id });\n\n  if (!chat) {\n    const title = await generateTitleFromUserMessage({ message: userMessage });\n    await saveChat({ id, userId: session.user.id, title });\n  }\n\n  const userMessageId = generateUUID();\n\n  await saveMessages({\n    messages: [\n      { ...userMessage, id: userMessageId, createdAt: new Date(), chatId: id },\n    ],\n  });\n\n  return createDataStreamResponse({\n    execute: async (dataStream) => {\n      dataStream.writeData({\n        type: 'user-message-id',\n        content: userMessageId,\n      });\n\n      try {\n        // Fetch data from Supabase\n        const { data: commodities, error: commoditiesError } = await supabase\n          .from('Commodities')\n          .select('*');\n\n        const { data: locations, error: locationsError } = await supabase\n          .from('Locations')\n          .select('*');\n\n        if (commoditiesError || locationsError) {\n          throw new Error(\n            `Error fetching data: ${commoditiesError?.message || ''} ${\n              locationsError?.message || ''\n            }`\n          );\n        }\n\n        dataStream.writeData({\n          type: 'supabase-data',\n          content: { commodities, locations },\n        });\n\n        // Proceed with message generation\n        const result = await streamText({\n          model: customModel(model.apiIdentifier),\n          system: systemPrompt,\n          messages: coreMessages,\n          maxSteps: 5,\n          experimental_activeTools: allTools,\n          tools,\n          toolChoice: 'auto',\n          maxTokens: 2500,\n          experimental_toolCallStreaming: true,\n          maxRetries: 3,\n          experimental_telemetry: {\n            isEnabled: true,\n            functionId: 'stream-text',\n          },\n          onFinish: async ({ response, usage }) => {\n            if (session.user?.id) {\n              try {\n                console.log('Token usage:', usage);\n\n                const sanitizedMessages = sanitizeResponseMessages(\n                  response.messages\n                );\n                await saveMessages({\n                  messages: sanitizedMessages.map((message) => ({\n                    id: generateUUID(),\n                    chatId: id,\n                    role: message.role,\n                    content: message.content,\n                    createdAt: new Date(),\n                  })),\n                });\n              } catch (error) {\n                console.error('Failed to save messages:', error);\n              }\n            }\n          },\n        });\n\n        result.mergeIntoDataStream(dataStream);\n      } catch (error) {\n        if (error instanceof Error) {\n          console.error('Error during execution:', error.message);\n          dataStream.writeData({ type: 'error', content: error.message });\n        } else {\n          console.error('Unknown error during execution:', error);\n          dataStream.writeData({\n            type: 'error',\n            content: 'An unknown error occurred',\n          });\n        }\n      }\n    },\n  });\n}\n\nexport async function DELETE(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const id = searchParams.get('id');\n\n  if (!id) {\n    return new Response('Not Found', { status: 404 });\n  }\n\n  const session = await auth();\n\n  if (!session || !session.user) {\n    return new Response('Unauthorized', { status: 401 });\n  }\n\n  try {\n    const chat = await getChatById({ id });\n\n    if (chat.userId !== session.user.id) {\n      return new Response('Unauthorized', { status: 401 });\n    }\n\n    await deleteChatById({ id });\n\n    return new Response('Chat deleted', { status: 200 });\n  } catch (error) {\n    return new Response('An error occurred while processing your request', {\n      status: 500,\n    });\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1775, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1780, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 1780, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}